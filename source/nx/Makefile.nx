#---------------------------------------------------------------------------------
.SUFFIXES:
#---------------------------------------------------------------------------------

ifeq ($(strip $(DEVKITPRO)),)
$(error "Please set DEVKITPRO in your environment. export DEVKITPRO=<path to>/devkitpro")
endif

TOPDIR ?= $(CURDIR)
include $(DEVKITPRO)/libnx/switch_rules

#---------------------------------------------------------------------------------
# TARGET is the name of the output
# BUILD is the directory where object files & intermediate files will be placed
# SOURCES is a list of directories containing source code
# DATA is a list of directories containing data files
# INCLUDES is a list of directories containing header files
# EXEFS_SRC is the optional input directory containing data copied into exefs, if anything this normally should only contain "main.npdm".
# ROMFS is the directory containing data to be added to RomFS, relative to the Makefile (Optional)
#
# NO_ICON: if set to anything, do not use icon.
# NO_NACP: if set to anything, no .nacp file is generated.
# APP_TITLE is the name of the app stored in the .nacp file (Optional)
# APP_AUTHOR is the author of the app stored in the .nacp file (Optional)
# APP_VERSION is the version of the app stored in the .nacp file (Optional)
# APP_TITLEID is the titleID of the app stored in the .nacp file (Optional)
# ICON is the filename of the icon (.jpg), relative to the project folder.
#   If not set, it attempts to use one of the following (in this order):
#     - <Project name>.jpg
#     - icon.jpg
#     - <libnx folder>/default_icon.jpg
#---------------------------------------------------------------------------------
APP_TITLE	:=	NaziZombiesPortableNX
APP_AUTHOR	:=	naievil
APP_VERSION	:=	0.1.0

TARGET		:=	nzportable
BUILD		:=	build
SOURCES		:=	\
	$(wildcard src/game/monster/*) \
	src/game/player \
	src/game/savegame \
	src/game \
	src/client/menu \
	src/client \
	src/client/refresh/gl3_nx/glad \
	src/client/refresh/gl3_nx \
	src/client/refresh/files \
	src/server \
	src/backends/nx \
	src/backends/nx/shared \
	src/backends/generic \
	src/common \
	src/common/unzip \
	src/common/shared

SOURCEFILES	:=\
	nxsrc/bsd_strlcat.c \
	nxsrc/bsd_strlcpy.c \
	nxsrc/bgmusic.c \
	nxsrc/snd_codec.c \
	nxsrc/snd_flac.c \
	nxsrc/snd_wave.c \
	nxsrc/snd_vorbis.c \
	nxsrc/snd_opus.c \
	nxsrc/snd_mpg123.c \
	nxsrc/snd_mikmod.c \
	nxsrc/snd_xmp.c \
	nxsrc/snd_umx.c \
	nxsrc/snd_dma.c \
	nxsrc/snd_mix.c \
	nxsrc/snd_mem.c \
	nxsrc/snd_sdl.c \
	nxsrc/cd_sdl.c \
	nxsrc/in_sdl.c \
	nxsrc/gl_refrag.c \
	nxsrc/gl_rlight.c \
	nxsrc/gl_rpart.c \
	nxsrc/gl_rmain.c \
	nxsrc/gl_fog.c \
	nxsrc/gl_rmisc.c \
	nxsrc/r_part.c \
	nxsrc/r_world.c \
	nxsrc/gl_screen.c \
	nxsrc/gl_sky.c \
	nxsrc/gl_warp.c \
	nxsrc/gl_vidsdl.c \
	nxsrc/gl_hud.c \
	nxsrc/gl_draw.c \
	nxsrc/image.c \
	nxsrc/gl_texmgr.c \
	nxsrc/gl_mesh.c \
	nxsrc/r_sprite.c \
	nxsrc/r_alias.c \
	nxsrc/r_brush.c \
	nxsrc/gl_model.c \
	nxsrc/net_bsd.c \
	nxsrc/net_udp.c \
	nxsrc/pl_nx.c \
	nxsrc/sys_sdl_nx.c \
	nxsrc/main_sdl_nx.c \
	nxsrc/net_dgrm.c \
	nxsrc/net_loop.c \
	nxsrc/net_main.c \
	nxsrc/chase.c \
	nxsrc/cl_demo.c \
	nxsrc/cl_input.c \
	nxsrc/cl_main.c \
	nxsrc/cl_parse.c \
	nxsrc/cl_tent.c \
	nxsrc/console.c \
	nxsrc/keys.c \
	nxsrc/menu.c \
	nxsrc/sbar.c \
	nxsrc/view.c \
	nxsrc/wad.c \
	nxsrc/cmd.c \
	nxsrc/common.c \
	nxsrc/crc.c \
	nxsrc/cvar.c \
	nxsrc/cfgfile.c \
	nxsrc/host.c \
	nxsrc/host_cmd.c \
	nxsrc/mathlib.c \
	nxsrc/pr_cmds.c \
	nxsrc/pr_edict.c \
	nxsrc/pr_exec.c \
	nxsrc/sv_main.c \
	nxsrc/sv_move.c \
	nxsrc/sv_phys.c \
	nxsrc/sv_user.c \
	nxsrc/world.c \
	nxsrc/zone.c \
	nxsrc/glad/glad.c

DATA		:=	data
INCLUDES	:=	
DEFINES		+=	-DUSE_SDL2 -DUSE_CODEC_VORBIS -DUSE_CODEC_MP3 -DUSE_CODEC_WAVE -DSDL_FRAMEWORK
EXEFS_SRC	:=	exefs_src
#ROMFS	:=	romfs

#---------------------------------------------------------------------------------
# options for code generation
#---------------------------------------------------------------------------------
ARCH	:=	-march=armv8-a -mtune=cortex-a57 -mtp=soft -fPIE -mcpu=cortex-a57+crc+fp+simd

CFLAGS	:=	-g -Wall -O3 -fno-strict-aliasing -fomit-frame-pointer -ffunction-sections \
			$(ARCH) $(DEFINES)

CFLAGS	+=	$(INCLUDE) -D__SWITCH__

CXXFLAGS	:= $(CFLAGS) -fno-rtti -fno-exceptions -std=gnu++11

ASFLAGS	:=	-g $(ARCH)
LDFLAGS	=	-specs=$(DEVKITPRO)/libnx/switch.specs -g $(ARCH) -Wl,-Map,$(notdir $*.map)

LIBS	:= -lSDL2main -lSDL2 -lEGL -lglapi -ldrm_nouveau \
		-lvorbisfile -lvorbis -logg -lmpg123 -lnx -lm -lstdc++

#---------------------------------------------------------------------------------
# list of directories containing libraries, this must be the top level containing
# include and lib
#---------------------------------------------------------------------------------
LIBDIRS	:= $(PORTLIBS) $(LIBNX)


#---------------------------------------------------------------------------------
# no real need to edit anything past this point unless you need to add additional
# rules for different file extensions
#---------------------------------------------------------------------------------
ifneq ($(BUILD),$(notdir $(CURDIR)))
#---------------------------------------------------------------------------------

export OUTPUT	:=	$(CURDIR)/$(TARGET)
export TOPDIR	:=	$(CURDIR)

export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir)) \
			$(foreach sf,$(SOURCEFILES),$(CURDIR)/$(dir $(sf))) \
			$(foreach dir,$(DATA),$(CURDIR)/$(dir))

export DEPSDIR	:=	$(CURDIR)/$(BUILD)

CFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.c))) $(foreach f,$(SOURCEFILES),$(notdir $(f)))
CPPFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.cpp)))
SFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.s)))
BINFILES	:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)/*.*)))

#---------------------------------------------------------------------------------
# use CXX for linking C++ projects, CC for standard C
#---------------------------------------------------------------------------------
ifeq ($(strip $(CPPFILES)),)
#---------------------------------------------------------------------------------
	export LD	:=	$(CC)
#---------------------------------------------------------------------------------
else
#---------------------------------------------------------------------------------
	export LD	:=	$(CXX)
#---------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------

export OFILES_BIN	:=	$(addsuffix .o,$(BINFILES))
export OFILES_SRC	:=	$(CPPFILES:.cpp=.o) $(CFILES:.c=.o) $(SFILES:.s=.o)
export OFILES 	:=	$(OFILES_BIN) $(OFILES_SRC)
export HFILES_BIN	:=	$(addsuffix .h,$(subst .,_,$(BINFILES)))

export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
			$(foreach dir,$(LIBDIRS),-I$(dir)/include) \
			-I$(CURDIR)/$(BUILD)

export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib)

export BUILD_EXEFS_SRC := $(TOPDIR)/$(EXEFS_SRC)

ifeq ($(strip $(ICON)),)
	icons := $(wildcard *.jpg)
	ifneq (,$(findstring $(TARGET).jpg,$(icons)))
		export APP_ICON := $(TOPDIR)/$(TARGET).jpg
	else
		ifneq (,$(findstring icon.jpg,$(icons)))
			export APP_ICON := $(TOPDIR)/icon.jpg
		endif
	endif
else
	export APP_ICON := $(TOPDIR)/$(ICON)
endif

ifeq ($(strip $(NO_ICON)),)
	export NROFLAGS += --icon=$(APP_ICON)
endif

ifeq ($(strip $(NO_NACP)),)
	export NROFLAGS += --nacp=$(CURDIR)/$(TARGET).nacp
endif

ifneq ($(APP_TITLEID),)
	export NACPFLAGS += --titleid=$(APP_TITLEID)
endif

ifneq ($(ROMFS),)
	export NROFLAGS += --romfsdir=$(CURDIR)/$(ROMFS)
endif

.PHONY: $(BUILD) clean all

#---------------------------------------------------------------------------------
all: $(BUILD)

$(BUILD):
	@[ -d $@ ] || mkdir -p $@
	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile.nx

#---------------------------------------------------------------------------------
clean:
	@echo clean ...
	@rm -fr $(BUILD) $(TARGET).pfs0 $(TARGET).nso $(TARGET).nro $(TARGET).nacp $(TARGET).elf


#---------------------------------------------------------------------------------
else
.PHONY:	all

DEPENDS	:=	$(OFILES:.o=.d)

#---------------------------------------------------------------------------------
# main targets
#---------------------------------------------------------------------------------
all	:	$(OUTPUT).pfs0 $(OUTPUT).nro
	mv ../nzportable.nacp ./../../../nx/nzportable/nzportable.nacp
	mv ../nzportable.nro ./../../../nx/nzportable/nzportable.nro 

$(OUTPUT).pfs0	:	$(OUTPUT).nso

$(OUTPUT).nso	:	$(OUTPUT).elf

ifeq ($(strip $(NO_NACP)),)
$(OUTPUT).nro	:	$(OUTPUT).elf $(OUTPUT).nacp
else
$(OUTPUT).nro	:	$(OUTPUT).elf
endif

$(OUTPUT).elf	:	$(OFILES)

$(OFILES_SRC)	: $(HFILES_BIN)

#---------------------------------------------------------------------------------
# you need a rule like this for each extension you use as binary data
#---------------------------------------------------------------------------------
%.bin.o	%_bin.h :	%.bin
#---------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)

-include $(DEPENDS)

#---------------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------------
